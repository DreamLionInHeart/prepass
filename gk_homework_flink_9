代码环境

配置文件位于 flink-playgrounds 仓库中，首先检出该仓库并构建

docker 镜像：

> git clone https://github.com/apache/flink-playgrounds.git

> cd flink-playgrounds/table-walkthrough



如何运行和停止

在开始运行之前先在 Docker 主机上创建检查点和保存点目录

（如果不做这一步有可能报错）:

• mkdir -p /tmp/flink-checkpoints-directory

• mkdir -p /tmp/flink-savepoints-directory

编译打包代码

• docker-compose build

启动环境：

• docker-compose up -d

执行如下命令停止 docker 环境：

• docker-compose down -v



查看和验证

Flink WebUI 界面

• 打开浏览器并访问 http://localhost:8081

日志

• 查看 JobManager 日志：docker-compose logs -f jobmanager

• 查看 TaskManager 日志：docker-compose logs -f taskmanager

把结果导入 MySQL

• docker-compose exec mysql mysql -Dsql-demo -usql-demo -pdemo-sql

• mysql> use sql-demo;

• mysql> select count(*) from spend_report;

在 Grafana 查看最终结果

• http://localhost:3000/d/FOe0PbmGk/walkthrough?viewPanel=2&orgId=1&refre

sh=5s



修改好的代码

package org.apache.flink.playgrounds.spendreport;



import org.apache.flink.table.api.*;import org.apache.flink.table.expressions.Expression;import org.apache.flink.table.expressions.ExpressionVisitor;



import java.time.LocalDateTime;import java.util.List;



import static org.apache.flink.table.api.Expressions.*;



public class SpendReport {



public static Table report(Table transactions) {
    return transactions
            //滑动窗口，固定长度为5分钟，滑动间隔1分钟
            .window(Slide.over(lit(5).minute()).every(lit(1).minute()).on($("transaction_time")).as("m_window"))
            .groupBy($("account_id"), $("m_window"))
            .select(
                    $("account_id"),
                    $("m_window").start().as("log_ts"),
                    $("amount").avg().as("amount"));

}

public static void main(String[] args)  {
    EnvironmentSettings settings = EnvironmentSettings.newInstance().build();
    TableEnvironment tEnv = TableEnvironment.create(settings);

    tEnv.executeSql("CREATE TABLE transactions (\n" +
            "    account_id  BIGINT,\n" +
            "    amount      BIGINT,\n" +
            "    transaction_time TIMESTAMP(3),\n" +
            "    WATERMARK FOR transaction_time AS transaction_time - INTERVAL '5' SECOND\n" +
            ") WITH (\n" +
            "    'connector' = 'kafka',\n" +
            "    'topic'     = 'transactions',\n" +
            "    'properties.bootstrap.servers' = 'kafka:9092',\n" +
            "    'format'    = 'csv'\n" +
            ")");

    tEnv.executeSql("CREATE TABLE spend_report (\n" +
            "    account_id BIGINT,\n" +
            "    log_ts     TIMESTAMP(3),\n" +
            "    amount     BIGINT\n," +
            "    PRIMARY KEY (account_id, log_ts) NOT ENFORCED" +
            ") WITH (\n" +
            "  'connector'  = 'jdbc',\n" +
            "  'url'        = 'jdbc:mysql://mysql:3306/sql-demo',\n" +
            "  'table-name' = 'spend_report',\n" +
            "  'driver'     = 'com.mysql.jdbc.Driver',\n" +
            "  'username'   = 'sql-demo',\n" +
            "  'password'   = 'demo-sql'\n" +
            ")");

    Table transactions = tEnv.from("transactions");
    report(transactions).executeInsert("spend_report");
}



}
